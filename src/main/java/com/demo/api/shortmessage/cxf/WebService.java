package com.demo.api.shortmessage.cxf;

import org.springframework.stereotype.Component;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.2.6
 * 2018-09-12T16:38:51.638+08:00
 * Generated source version: 3.2.6
 */
@Component
@WebServiceClient(name = "WebService",
    wsdlLocation = "http://sdk.entinfo.cn:8061/webservice.asmx?WSDL",
    targetNamespace = "http://entinfo.cn/")
public class WebService extends Service {

    public static final URL WSDL_LOCATION;
    private static final String URL = "http://entinfo.cn/";

    public static final QName SERVICE = new QName(URL, "WebService");
    public static final QName WebServiceHttpGet = new QName(URL, "WebServiceHttpGet");
    public static final QName WebServiceHttpPost = new QName(URL, "WebServiceHttpPost");
    public static final QName WebServiceSoap = new QName(URL, "WebServiceSoap");
    public static final QName WebServiceSoap12 = new QName(URL, "WebServiceSoap12");

    static {
        URL url = null;
        try {
            url = new URL("http://sdk.entinfo.cn:8061/webservice.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WebService.class.getName())
                .log(java.util.logging.Level.INFO,
                    "Can not initialize the default wsdl from {0}", "http://sdk.entinfo.cn:8061/webservice.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public WebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WebService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public WebService(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public WebService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public WebService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }


    /**
     * @return returns WebServiceHttpGet
     */
    @WebEndpoint(name = "WebServiceHttpGet")
    public WebServiceHttpGet getWebServiceHttpGet() {
        return super.getPort(WebServiceHttpGet, WebServiceHttpGet.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns WebServiceHttpGet
     */
    @WebEndpoint(name = "WebServiceHttpGet")
    public WebServiceHttpGet getWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(WebServiceHttpGet, WebServiceHttpGet.class, features);
    }


    /**
     * @return returns WebServiceHttpPost
     */
    @WebEndpoint(name = "WebServiceHttpPost")
    public WebServiceHttpPost getWebServiceHttpPost() {
        return super.getPort(WebServiceHttpPost, WebServiceHttpPost.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns WebServiceHttpPost
     */
    @WebEndpoint(name = "WebServiceHttpPost")
    public WebServiceHttpPost getWebServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(WebServiceHttpPost, WebServiceHttpPost.class, features);
    }


    /**
     * @return returns WebServiceSoap
     */
    @WebEndpoint(name = "WebServiceSoap")
    public WebServiceSoap getWebServiceSoap() {
        return super.getPort(WebServiceSoap, WebServiceSoap.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns WebServiceSoap
     */
    @WebEndpoint(name = "WebServiceSoap")
    public WebServiceSoap getWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(WebServiceSoap, WebServiceSoap.class, features);
    }


    /**
     * @return returns WebServiceSoap
     */
    @WebEndpoint(name = "WebServiceSoap12")
    public WebServiceSoap getWebServiceSoap12() {
        return super.getPort(WebServiceSoap12, WebServiceSoap.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns WebServiceSoap
     */
    @WebEndpoint(name = "WebServiceSoap12")
    public WebServiceSoap getWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(WebServiceSoap12, WebServiceSoap.class, features);
    }

}
